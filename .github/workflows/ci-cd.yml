name: Django CI


on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.2'

      - name: install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          poetry install --no-root

      - name: Run Flake8
        run: poetry run flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    env: # this variable will de able for each step in this job
      GITHUB_ACTIONS: true

    steps:
      - name: Set environment variables
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV  

      - name: Check out code # allow us to clone code to container where we're going to do jobs
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.2'

      - name: install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        # flag --no-root for DO NOT install the project itself as a package.
        run: |
          poetry install --no-root

        #poetry run runs any command inside the virtual environment that Poetry creates.
        #Without this, the command is executed "as is" — and there is no Django.
      - name: Run migrate
        run: poetry run python manage.py migrate

      - name: Run tests
        run: poetry run python manage.py test


  build:
    needs: test
    runs-on: ubuntu-latest
    # только пуш в main
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build all images using docker-compose
        run: docker compose build

      - name: Push backend, nginx, celery and celery beat images
        run: |
          docker push valdemarbackend/myapp2-backend
          docker push valdemarbackend/myapp2-nginx
          docker push valdemarbackend/myapp2-celery
          docker push valdemarbackend/myapp2-beat

      - name: Pull & Push official Postgres and Redis
        run: |
          docker pull postgres:17
          docker tag postgres:17 valdemarbackend/myapp2-postgres:17
          docker push valdemarbackend/myapp2-postgres:17
  
          docker pull redis:7
          docker tag redis:7 valdemarbackend/myapp2-redis:7
          docker push valdemarbackend/myapp2-redis:7



  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up SSH VM and SSH for GitHub
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server pull code, clean up & restart
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          
          set -xe
    
          cd ~
    
          if [ ! -d "habbits/.git" ]; then
            rm -rf habbits
            git clone -b develop https://github.com/Volodymyr-tech/AtomicsHabbits_Git.git habbits
          else
            cd habbits
            git pull origin develop
          fi
    
          sudo docker system prune -a --volumes -f || true
          sudo docker compose down --remove-orphans || true
          sudo docker compose up -d || true
          EOF