
services: # describing services we're going to use

  web:
    build:  # it uses DockerFile in main directory and install Python and Django code
      context: .
      dockerfile: Dockerfile
      target: backend

    env_file:
      - .env # giving access to environment variables
    command: >
      sh -c "python manage.py makemigrations && \
             python manage.py migrate && \
             python manage.py loaddata users/fixtures/admin.json && \             
             python manage.py collectstatic --noinput && \
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"

    volumes:
      - .:/app # we use main directory and docker directory /app for saving changing in code
      - static_volume:/app/staticfiles # it allows us to save data even if container was stopped
    ports: # mapping host port with docker container port
      - "8000:8000"
    depends_on: # it will run only if DB connection is True
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - yourtarget-net


  db:
    image: postgres:17 # using image from DockerHub
    env_file: # giving access to environment variables
      - .env
    volumes:  # it allows us to save data even if container was stopped
      - postgres_data:/var/lib/postgresql/data
    healthcheck: # testing DB before we start server
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - yourtarget-net

  redis:
    image: redis:7 # using image from DockerHub
    env_file: # giving access to environment variables
      - .env
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - yourtarget-net

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: celery

    env_file:
      - .env
    command: >
      celery -A config worker -l INFO -P eventlet
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    networks:
      - yourtarget-net

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: beat

    env_file:
      - .env
    command: >
      sh -c "python manage.py migrate && \
             celery -A config beat -l INFO -S django"
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    networks:
      - yourtarget-net

  nginx:
    build:
      context: ./nginx  # path to the directory with Dockerfile and nginx.conf
      dockerfile: Dockerfile
    ports:
      - "80:80" # mapping host port with docker port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/static
    depends_on:
      - web
    networks:
      - yourtarget-net


volumes:
  postgres_data:
  static_volume:

networks:
  yourtarget-net:
    driver: bridge